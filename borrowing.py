from data import books, students, find_student, find_book, MAX_BOOKS_PER_STUDENT

def borrow_book():
    """Wypo≈ºycza ksiƒÖ≈ºkƒô studentowi"""
    if not books:
        print("Brak ksiƒÖ≈ºek w bibliotece!")
        return
    if not students:
        print("Brak student√≥w w systemie!")
        return
    
    print("\n=== DOSTƒòPNE KSIƒÑ≈ªKI ===")
    available_books = []
    for i, book in enumerate(books):
        if book['copies'] > book['borrowed']:
            available_books.append(book)
            print(f"{len(available_books)}. '{book['title']}' - {book['author']} (dostƒôpne: {book['copies'] - book['borrowed']})")
    
    if not available_books:
        print("Brak dostƒôpnych ksiƒÖ≈ºek!")
        return
    
    try:
        book_choice = int(input("Wybierz numer ksiƒÖ≈ºki: ")) - 1
        chosen_book = available_books[book_choice]
        
        student_name = input("Podaj imiƒô i nazwisko studenta: ")
        student = find_student(student_name)
        
        if not student:
            print("Student nie znaleziony!")
            return
        
        if len(student['borrowed_books']) >= MAX_BOOKS_PER_STUDENT:
            print(f"Student ma ju≈º wypo≈ºyczone maksymalnie {MAX_BOOKS_PER_STUDENT} ksiƒÖ≈ºek!")
            return
        
        # Wypo≈ºycz ksiƒÖ≈ºkƒô
        chosen_book['borrowed'] += 1
        student['borrowed_books'].append(chosen_book['title'])
        print(f"Wypo≈ºyczono '{chosen_book['title']}' studentowi {student['name']}")
        
    except (ValueError, IndexError):
        print("B≈Çƒôdny wyb√≥r!")

def return_book():
    """Zwraca ksiƒÖ≈ºkƒô od studenta"""
    student_name = input("Podaj imiƒô i nazwisko studenta: ")
    student = find_student(student_name)
    
    if not student:
        print("Student nie znaleziony!")
        return
    
    if not student['borrowed_books']:
        print("Student nie ma wypo≈ºyczonych ksiƒÖ≈ºek!")
        return
    
    print(f"\n=== WYPO≈ªYCZONE KSIƒÑ≈ªKI - {student['name']} ===")
    for i, book_title in enumerate(student['borrowed_books']):
        print(f"{i+1}. {book_title}")
    
    try:
        book_choice = int(input("Wybierz numer ksiƒÖ≈ºki do zwrotu: ")) - 1
        book_title = student['borrowed_books'][book_choice]
        
        # Zwr√≥ƒá ksiƒÖ≈ºkƒô
        book = find_book(book_title)
        if book:
            book['borrowed'] -= 1
        student['borrowed_books'].remove(book_title)
        print(f"Zwr√≥cono '{book_title}'")
        
    except (ValueError, IndexError):
        print("B≈Çƒôdny wyb√≥r!")

def show_borrowed_books_report():
    """Wy≈õwietla raport wypo≈ºyczonych ksiƒÖ≈ºek"""
    print("\n" + "="*50)
    print("         RAPORT WYPO≈ªYCZONYCH KSIƒÑ≈ªEK")
    print("="*50)
    
    if not students:
        print("Brak student√≥w w systemie.")
        return
    
    has_borrowed = False
    for student in students:
        if student['borrowed_books']:
            has_borrowed = True
            print(f"\nüìö {student['name']}:")
            for book_title in student['borrowed_books']:
                print(f"   - {book_title}")
            print(f"   RAZEM: {len(student['borrowed_books'])}/5 ksiƒÖ≈ºek")
            
            if len(student['borrowed_books']) >= 4:
                print("   ‚ö†Ô∏è  UWAGA: Blisko limitu wypo≈ºycze≈Ñ!")
    
    if not has_borrowed:
        print("‚úÖ ≈ªaden student nie ma obecnie wypo≈ºyczonych ksiƒÖ≈ºek.")
    
    print("="*50)